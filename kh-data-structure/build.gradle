import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    id "com.vanniktech.maven.publish" version "0.29.0"
    id 'jacoco'
    id 'org.cadixdev.licenser' version '0.6.1'
}

group = 'keyhub'
version = '2.0.1'

repositories {
    mavenCentral()
}

java {
//    withJavadocJar()
    withSourcesJar()
}

license {
    header = project.file('../LICENSE')
}


signing {
    useGpgCmd()
    sign publishing.publications
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL)
    signAllPublications()

    coordinates("io.github.keyhub-projects", "kh-data", "2.0.1")

    pom {
        name = "kh-data"
        description = "A library for data manipulation"
        inceptionYear = "2024"
        url = "https://github.com/keyhub-projects/kh-data"
        licenses {
            license {
                name = "MIT"
                url = "https://opensource.org/licenses/MIT"
                distribution = "repo"
            }
        }
        developers {
            developer {
                id = "Iol-lshh"
                name = "Luke SH Hong"
                url = "https://github.com/Iol-lshh"
            }
        }
        scm {
            url = "https://github.com/username/mylibrary/"
            connection = "scm:git:git://github.com/keyhub-projects/kh-data.git"
            developerConnection = "scm:git:ssh://git@github.com/Iol-lshh/Iol-lshh.git"
        }
    }
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

tasks.named('test') {
    useJUnitPlatform()
    jacoco {
        enabled = true
        destinationFile = file("$buildDir/jacoco/\$.exec")
        includes = []
        excludes = []
        excludeClassLoaders = []
        includeNoLocationClasses = false
        sessionId = "<auto-generated value>"
        dumpOnExit = true
        classDumpDir = null
        output = JacocoTaskExtension.Output.FILE
        address = "localhost"
        port = 6300
        jmx = false
    }
}

jacocoTestReport {
    reports {
        html.destination file("$buildDir/jacoco/jacocoHtml")
        xml.destination file("$buildDir/jacoco/jacoco.xml")
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
            }
        }
    }
}
